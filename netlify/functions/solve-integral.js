// ملف: netlify/functions/solve-integral.js

// هذا السطر مهم إذا كنت تستخدم متغيرات بيئة محليًا مع `netlify dev`،
// ولكن عند النشر، متغيرات البيئة ستأتي من واجهة Netlify.
require('dotenv').config();

// لا حاجة لـ express أو cors هنا

exports.handler = async function (event, context) {
    // التحقق من أن الطلب هو POST
    if (event.httpMethod !== "POST") {
        return {
            statusCode: 405, // Method Not Allowed
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ error: "Method Not Allowed. Please use POST." })
        };
    }

    let requestBody;
    try {
        // جسم الطلب (body) يأتي كـ string من Netlify، لذا يجب تحليله
        requestBody = JSON.parse(event.body);
    } catch (e) {
        console.error("Invalid JSON body:", e);
        return {
            statusCode: 400, // Bad Request
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ error: "Invalid JSON body provided." })
        };
    }

    const integralExpression = requestBody.integral;
    const requestType = requestBody.type;

    if (!integralExpression) {
        return {
            statusCode: 400,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ error: 'Integral expression is missing.' })
        };
    }
    if (!requestType || (requestType !== 'solve' && requestType !== 'steps')) {
        return {
            statusCode: 400,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ error: 'Invalid request type. Must be "solve" or "steps".' })
        };
    }

    // الحصول على مفتاح API من متغيرات البيئة المعرفة في واجهة Netlify
    const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
    if (!GEMINI_API_KEY) {
        console.error("FATAL ERROR: GEMINI_API_KEY is not set in Netlify environment variables.");
        return {
            statusCode: 500, // Internal Server Error
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ error: 'Server configuration error: API key is missing.' })
        };
    }

    // بناء الـ prompt بناءً على نوع الطلب
    let prompt;
    if (requestType === 'solve') {
        prompt = `Evaluate the definite or indefinite integral: "${integralExpression}".
Strictly return ONLY the final mathematical result as a single, clean LaTeX string or a plain number.
ABSOLUTELY NO other text, explanations, context, apologies, or markdown formatting (such as \`\`\`latex or \`\`\`).
For example:
- If the integral is "∫x dx", return "\\frac{x^2}{2} + C".
- If the integral is "∫(from 0 to 1) of 2x dx", return "1".
- If the integral is invalid or cannot be solved, return exactly the string "Error: Invalid or unsolvable integral."
Do not repeat the result. Ensure the LaTeX is complete and correct for rendering.
The integral to solve is: "${integralExpression}"`;
    } else { // requestType === 'steps'
        prompt = `Provide a detailed, step-by-step solution for the following integral: ${integralExpression}.
For each step, clearly explain the integration rule or mathematical property being applied in ARABIC (e.g., "بتطبيق قاعدة القوة للتكامل: ∫x^n dx = (x^(n+1))/(n+1) + C", "باستخدام التكامل بالتعويض، نفرض أن u = ...", "بتطبيق التكامل بالتجزيء: ∫u dv = uv - ∫v du").
Show all significant intermediate algebraic calculations and simplifications.
All mathematical equations must be in LaTeX format. Format the answer as a Markdown ordered list.
Do not add any text indicating the solution was generated by an AI or language model.
The integral is: ${integralExpression}`;
    }

    const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
    const payload = { contents: chatHistory };
    // تأكد من استخدام اسم النموذج الصحيح الذي لديك صلاحية الوصول إليه
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`;

    try {
        const fetch = (await import('node-fetch')).default; // استيراد node-fetch ديناميكيًا

        const apiResponse = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        const apiResponseData = await apiResponse.json();

        if (!apiResponse.ok) {
            console.error(`Gemini API Error: ${apiResponse.status} ${apiResponse.statusText}`, JSON.stringify(apiResponseData, null, 2));
            let errorMessage = 'Error from Gemini API.';
            if (apiResponseData.error && apiResponseData.error.message) {
                errorMessage = apiResponseData.error.message;
            }
            return {
                statusCode: apiResponse.status,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ error: errorMessage, details: apiResponseData })
            };
        }

        if (apiResponseData.candidates && apiResponseData.candidates.length > 0 &&
            apiResponseData.candidates[0].content && apiResponseData.candidates[0].content.parts &&
            apiResponseData.candidates[0].content.parts.length > 0) {

            let resultText = apiResponseData.candidates[0].content.parts[0].text.trim();
            console.log("Raw response from Gemini:", `"${resultText}"`);

            // معالجة أساسية لإزالة تنسيق Markdown
            if (resultText.startsWith("```latex")) {
                resultText = resultText.substring(7);
                if (resultText.endsWith("```")) {
                    resultText = resultText.substring(0, resultText.length - 3);
                }
                resultText = resultText.trim();
            } else if (resultText.startsWith("```")) {
                resultText = resultText.substring(3);
                if (resultText.endsWith("```")) {
                    resultText = resultText.substring(0, resultText.length - 3);
                }
                resultText = resultText.trim();
            }

            console.log("Cleaned response for frontend:", `"${resultText}"`);

            return {
                statusCode: 200,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ result: resultText })
            };

        } else {
            console.error('Unexpected Gemini API response structure:', JSON.stringify(apiResponseData, null, 2));
            if (apiResponseData.promptFeedback && apiResponseData.promptFeedback.blockReason) {
                return {
                    statusCode: 400, // أو كود خطأ مناسب آخر
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ error: `Request blocked by API: ${apiResponseData.promptFeedback.blockReason}`, details: apiResponseData.promptFeedback })
                };
            }
            return {
                statusCode: 500,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ error: 'Failed to get a valid response from Gemini API (unexpected structure).' })
            };
        }

    } catch (error) {
        console.error('Error in Netlify function execution:', error);
        return {
            statusCode: 500,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ error: 'Internal server error while processing integral.', details: error.message })
        };
    }
};